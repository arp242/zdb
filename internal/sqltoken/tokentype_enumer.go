// Code generated by "enumer -type=TokenType -json"; DO NOT EDIT.

package sqltoken

import (
	"encoding/json"
	"fmt"
)

const _TokenTypeName = "CommentWhitespaceQuestionMarkAtSignDollarNumberColonWordLiteralIdentifierAtWordNumberSemicolonPunctuationWordOther"

var _TokenTypeIndex = [...]uint8{0, 7, 17, 29, 35, 47, 56, 63, 73, 79, 85, 94, 105, 109, 114}

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenTypeIndex)-1) {
		return fmt.Sprintf("TokenType(%d)", i)
	}
	return _TokenTypeName[_TokenTypeIndex[i]:_TokenTypeIndex[i+1]]
}

var _TokenTypeValues = []TokenType{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}

var _TokenTypeNameToValueMap = map[string]TokenType{
	_TokenTypeName[0:7]:     0,
	_TokenTypeName[7:17]:    1,
	_TokenTypeName[17:29]:   2,
	_TokenTypeName[29:35]:   3,
	_TokenTypeName[35:47]:   4,
	_TokenTypeName[47:56]:   5,
	_TokenTypeName[56:63]:   6,
	_TokenTypeName[63:73]:   7,
	_TokenTypeName[73:79]:   8,
	_TokenTypeName[79:85]:   9,
	_TokenTypeName[85:94]:   10,
	_TokenTypeName[94:105]:  11,
	_TokenTypeName[105:109]: 12,
	_TokenTypeName[109:114]: 13,
}

// TokenTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TokenTypeString(s string) (TokenType, error) {
	if val, ok := _TokenTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TokenType values", s)
}

// TokenTypeValues returns all values of the enum
func TokenTypeValues() []TokenType {
	return _TokenTypeValues
}

// IsATokenType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TokenType) IsATokenType() bool {
	for _, v := range _TokenTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TokenType
func (i TokenType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TokenType
func (i *TokenType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TokenType should be a string, got %s", data)
	}

	var err error
	*i, err = TokenTypeString(s)
	return err
}
